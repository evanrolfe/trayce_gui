name: Build and Test
on: [push]

permissions:
  contents: write

jobs:
  build-linux:
    name: Build Linux
    runs-on: ubuntu-latest
    steps:
      - name: Clone repository
        uses: actions/checkout@v4

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          flutter-version: 3.29.3

      - name: Install dependencies
        run: |
          sudo apt update -y
          sudo apt install -y sqlite3 libsqlite3-dev ninja-build libgtk-3-dev libglu1-mesa xvfb nodejs

      - name: Build
        run: make build-linux

      - name: Unit Test
        run: make test
      # - name: Start tmate session
      #   uses: mxschmitt/action-tmate@v3

      - name: Integration Test
        run: xvfb-run flutter test ./integration_test/main.dart -r github

      - name: Package .deb
        run: make pkg-deb

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: deb-artifact
          path: dist/trayce.deb

  build-mac-arm64:
    name: Build Mac (arm64)
    if: github.ref == 'refs/heads/main'
    runs-on: macos-latest
    steps:
      - name: Clone repository
        uses: actions/checkout@v4

      - name: Decode and Save Certificates
        env:
          APPLE_DEV_ID_CERTIFICATE_BASE64: ${{ secrets.APPLE_DEV_ID_CERTIFICATE_BASE64 }}
          APPLE_DEV_ID_PRIVATE_BASE64: ${{ secrets.APPLE_DEV_ID_PRIVATE_BASE64 }}
          APPLE_APP_STORE_CONNECT_PRIVATE_KEY: ${{ secrets.APPLE_APP_STORE_CONNECT_PRIVATE_KEY }}
        run: |
          echo "$APPLE_DEV_ID_CERTIFICATE_BASE64" | base64 --decode > /tmp/certificate.cer
          echo "$APPLE_DEV_ID_PRIVATE_BASE64" | base64 --decode > /tmp/private.p12
          echo "$APPLE_APP_STORE_CONNECT_PRIVATE_KEY" > /tmp/app_store_private.p12

      - name: Import Certificates
        env:
          APPLE_DEV_ID_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_DEV_ID_CERTIFICATE_PASSWORD }}
          APPLE_APP_STORE_CONNECT_KEY_ID: ${{ secrets.APPLE_APP_STORE_CONNECT_KEY_ID }}
          APPLE_APP_STORE_CONNECT_ISSUER_ID: ${{ secrets.APPLE_APP_STORE_CONNECT_ISSUER_ID }}
        run: |
          security create-keychain -p "" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "" build.keychain

          security import /tmp/certificate.cer -k build.keychain -T /usr/bin/codesign
          security import /tmp/private.p12 -k build.keychain -P "$APPLE_DEV_ID_CERTIFICATE_PASSWORD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "" build.keychain
          xcrun notarytool store-credentials "trayce-profile" --key /tmp/app_store_private.p12 --key-id "$APPLE_APP_STORE_CONNECT_KEY_ID" --issuer "$APPLE_APP_STORE_CONNECT_ISSUER_ID" --keychain ~/Library/Keychains/build.keychain-db

      - name: Verify Certificate
        run: security find-identity -p codesigning -v

      - name: Install create-dmg
        run: |
          cd /tmp
          wget https://github.com/create-dmg/create-dmg/archive/refs/tags/v1.1.0.tar.gz
          tar -xzf v1.1.0.tar.gz
          cd create-dmg-1.1.0
          sudo make install

      - name: Install Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'
          architecture: 'arm64'
          cache: true

      - name: Install Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          flutter-version: 3.29.3

      - name: Build
        run: make build-mac

      - name: Codesign
        run: |
          security unlock-keychain -p "" build.keychain
          codesign --deep --force --verbose --options=runtime --keychain build.keychain --entitlements macos/Runner/Release.entitlements  --sign "Developer ID Application: Evan Rolfe (KS7QN3G38M)" build/macos/Build/Products/Release/trayce.app

      - name: Package .dmg
        run: make pkg-dmg

      - name: Notarize .dmg
        run: |
          security unlock-keychain -p "" build.keychain
          xcrun notarytool submit ./dist/trayce.dmg --wait --keychain-profile "trayce-profile" --keychain ~/Library/Keychains/build.keychain-db
          xcrun stapler staple ./dist/trayce.dmg

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: dmg-artifact
          path: dist/trayce.dmg

  release-edge:
    name: Publish Edge Release
    if: github.ref == 'refs/heads/main'
    needs: [build-linux, build-mac-arm64]
    runs-on: ubuntu-latest
    steps:
      - name: Clone repository
        uses: actions/checkout@v4

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: deb-artifact

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: dmg-artifact

      - name: Create release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release delete edge --repo github.com/evanrolfe/trayce_gui --cleanup-tag --yes || true
          gh release create edge --repo github.com/evanrolfe/trayce_gui --title "edge" --prerelease --target main --generate-notes

      - name: Upload .deb
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: gh release upload edge trayce.deb --repo github.com/evanrolfe/trayce_gui

      - name: Upload .dmg
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: gh release upload edge trayce.dmg --repo github.com/evanrolfe/trayce_gui

  release-version:
    name: Publish Version Release
    if: github.ref == 'refs/heads/main' && startsWith(github.event.head_commit.message, 'release:')
    needs: [release-edge]
    runs-on: ubuntu-latest
    steps:
      - name: Clone repository
        uses: actions/checkout@v4

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: deb-artifact

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: dmg-artifact

      - name: Create release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          export TAG="v$(cat ./VERSION)"
          gh release create ${TAG} --repo github.com/evanrolfe/trayce_gui --title ${TAG} --target main --generate-notes

      - name: Upload .deb
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          export TAG="v$(cat ./VERSION)"
          gh release upload ${TAG} trayce.deb --repo github.com/evanrolfe/trayce_gui

      - name: Upload .dmg
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          export TAG="v$(cat ./VERSION)"
          gh release upload ${TAG} trayce.dmg --repo github.com/evanrolfe/trayce_gui
